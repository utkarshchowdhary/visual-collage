{"version":3,"sources":["serviceWorker.js","components/Header.js","components/SearchBar.js","components/ImageCard.js","components/ImageList.js","apis/unsplash.js","components/App.js","index.js"],"names":["isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","Header","props","className","title","subtitle","defaultProps","SearchBar","onInputChange","e","term","target","value","setState","onFormSubmit","preventDefault","onSubmit","inputRef","React","createRef","this","current","focus","ref","type","placeholder","onChange","Component","ImageCard","setSpans","height","imageRef","clientHeight","spans","Math","ceil","addEventListener","image","alt_description","urls","style","gridRowEnd","alt","src","regular","ImageList","images","map","key","id","axios","create","baseURL","headers","Authorization","App","onSearchSubmit","a","unsplash","get","params","query","response","data","results","ReactDOM","render","document","querySelector","URL","process","href","origin","fetch","contentType","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.a354f271.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then((registration) => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch((error) => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then((response) => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then((registration) => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then((registration) => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\n\r\nimport './Header.css';\r\n\r\nconst Header = (props) => (\r\n  <div className=\"header\">\r\n    <div className=\"content-container\">\r\n      <h1 className=\"header__title\">{props.title}</h1>\r\n      {props.subtitle && <h2 className=\"header__subtitle\">{props.subtitle}</h2>}\r\n    </div>\r\n  </div>\r\n);\r\n\r\nHeader.defaultProps = {\r\n  title: 'Visual Collage',\r\n  subtitle: 'Photos for Everyone',\r\n};\r\n\r\nexport default Header;\r\n","import React from 'react';\r\n\r\nimport './SearchBar.css';\r\n\r\nexport default class SearchBar extends React.Component {\r\n  constructor() {\r\n    super();\r\n    this.state = { term: '' };\r\n    this.inputRef = React.createRef();\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.inputRef.current.focus();\r\n  }\r\n\r\n  onInputChange = (e) => {\r\n    const term = e.target.value;\r\n    this.setState(() => ({ term }));\r\n  };\r\n\r\n  onFormSubmit = (e) => {\r\n    e.preventDefault();\r\n    this.props.onSubmit(this.state.term);\r\n    this.setState(() => ({ term: '' }));\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"search-bar\">\r\n        <form onSubmit={this.onFormSubmit}>\r\n          <input\r\n            ref={this.inputRef}\r\n            type=\"text\"\r\n            value={this.state.term}\r\n            placeholder=\"Search Unsplash...\"\r\n            onChange={this.onInputChange}\r\n          />\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from 'react';\r\n\r\nexport default class ImageCard extends React.Component {\r\n  constructor() {\r\n    super();\r\n    this.state = { spans: 0 };\r\n    this.imageRef = React.createRef();\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.imageRef.current.addEventListener('load', this.setSpans);\r\n  }\r\n\r\n  setSpans = () => {\r\n    const height = this.imageRef.current.clientHeight;\r\n    const spans = Math.ceil(height / 10);\r\n\r\n    this.setState(() => ({ spans }));\r\n  };\r\n\r\n  render() {\r\n    const { alt_description, urls } = this.props.image;\r\n    return (\r\n      <div style={{ gridRowEnd: `span ${this.state.spans}` }}>\r\n        <img ref={this.imageRef} alt={alt_description} src={urls.regular} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ImageCard from './ImageCard';\r\n\r\nimport './ImageList.css';\r\n\r\nconst ImageList = (props) => {\r\n  const images = props.images.map((image) => (\r\n    <ImageCard key={image.id} image={image} />\r\n  ));\r\n\r\n  return <div className=\"image-list\">{images}</div>;\r\n};\r\n\r\nexport default ImageList;\r\n","import axios from 'axios';\r\n\r\nexport default axios.create({\r\n  baseURL: 'https://api.unsplash.com',\r\n  headers: {\r\n    Authorization: 'Client-ID cl4v8AR2s9talMP5uRfe3t_fSlzpp0TkJI3GlEcK3zM',\r\n  },\r\n});\r\n","import React from 'react';\r\nimport Header from './Header';\r\nimport SearchBar from './SearchBar';\r\nimport ImageList from './ImageList';\r\nimport unsplash from '../apis/unsplash';\r\n\r\nexport default class App extends React.Component {\r\n  state = { images: [] };\r\n\r\n  onSearchSubmit = async (term) => {\r\n    const response = await unsplash.get('/search/photos', {\r\n      params: { query: term },\r\n    });\r\n\r\n    this.setState(() => ({ images: response.data.results }));\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <>\r\n        <Header />\r\n        <SearchBar onSubmit={this.onSearchSubmit} />\r\n        <ImageList images={this.state.images} />\r\n      </>\r\n    );\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport App from './components/App';\r\n\r\nimport './index.css';\r\n\r\nReactDOM.render(<App />, document.querySelector('#root'));\r\n\r\nserviceWorker.register();\r\n"],"sourceRoot":""}